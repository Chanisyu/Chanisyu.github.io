<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-03-23T17:06:54+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">sunseekers</title><subtitle>description</subtitle><author><name>sunseekers</name></author><entry><title type="html">HTML 全局属性的使用</title><link href="http://localhost:4000/2021/03/16/gloab-attr/" rel="alternate" type="text/html" title="HTML 全局属性的使用" /><published>2021-03-16T00:00:00+08:00</published><updated>2021-03-16T00:00:00+08:00</updated><id>http://localhost:4000/2021/03/16/gloab-attr</id><content type="html" xml:base="http://localhost:4000/2021/03/16/gloab-attr/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;在原生项目的开发中看到一些全局的属性使用，减少了很多的工作量，在没有框架的基础下&lt;/p&gt;

&lt;h2 id=&quot;全局属性及用途&quot;&gt;全局属性及用途&lt;/h2&gt;

&lt;p&gt;[data-&lt;em&gt;](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-&lt;/em&gt;):全局自定义属性&lt;/p&gt;

&lt;p&gt;可用来唯一标识，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;li data-id=&quot;10784&quot;&amp;gt;Jason Walters, 003: Found dead in &quot;A View to a Kill&quot;.&amp;lt;/li&amp;gt;&lt;/code&gt; 这个list的id，获取的时候 ele.dataset.id 即可。如果使用框架的时候可以在点击的时候把整条数据项穿进去，但是不借入框架的话，就有点麻烦&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="HTML" /><summary type="html">背景 在原生项目的开发中看到一些全局的属性使用，减少了很多的工作量，在没有框架的基础下</summary></entry><entry><title type="html">关注原生标签和属性，你会发现很多意想不到的事情</title><link href="http://localhost:4000/2021/03/04/HTMLAll/" rel="alternate" type="text/html" title="关注原生标签和属性，你会发现很多意想不到的事情" /><published>2021-03-04T00:00:00+08:00</published><updated>2021-03-04T00:00:00+08:00</updated><id>http://localhost:4000/2021/03/04/HTMLAll</id><content type="html" xml:base="http://localhost:4000/2021/03/04/HTMLAll/">&lt;h1 id=&quot;日常扯皮&quot;&gt;日常扯皮&lt;/h1&gt;

&lt;p&gt;有一天&lt;a href=&quot;https://github.com/chokcoco&quot;&gt;CoCo&lt;/a&gt;问我你们阅文公众号文章是怎么产出的，我的回答是基于业务中的问题，讨论学习
&lt;img src=&quot;http://localhost:4000/images/3/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为啥我会这样回答呢？我就是那个在业务中问题不少的小伙伴，问问题是我长项，因为问的越多我懂的越多。
&lt;img src=&quot;http://localhost:4000/images/3/3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我本就知道的不多，若我还是不问，那我知道的便更少，有一群大佬同事，得天独厚的资源不用用太可惜了。&lt;/p&gt;

&lt;h2 id=&quot;有趣的原生标签和属性&quot;&gt;有趣的原生标签和属性&lt;/h2&gt;
&lt;p&gt;在我眼里html就是写布局，css就是写样式；但是在大佬们的眼里，它们就是一个个活宝无所不能。&lt;/p&gt;
&lt;h3 id=&quot;button-的-autofocus-属性可实现聚焦滚动到指定位置&quot;&gt;button 的 autofocus 属性可实现聚焦滚动到指定位置&lt;/h3&gt;
&lt;p&gt;光标会自动定位到该元素上面，不管元素在哪&lt;/p&gt;

&lt;p&gt;使用场景：已进入页面的时候需要自动滚动到x位置，你又懒得用js去计算定位&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/WNoEEdJ&quot;&gt;demo&lt;/a&gt;:在线编辑器失效，可以拿代码网页自己跑&lt;/p&gt;

&lt;h3 id=&quot;label标签实现距离不是问题&quot;&gt;label标签实现距离不是问题&lt;/h3&gt;
&lt;p&gt;异地恋最大的问题就是距离，多少甜蜜恩爱的小情侣终究抵不过距离。可是这对于label和input来说，距离在他们这对小情侣眼里不值一提，它们的心永远在一起。label 的 for 永远心系 input 的id，不管在页面的哪一个角落。&lt;/p&gt;

&lt;p&gt;使用场景：点击区域a，区域b发生变化&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/LYRBBZL&quot;&gt;距离遥远都不是事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/yLaWmPv&quot;&gt;纯css 实现弹窗的显示隐藏&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/WNoKXoR&quot;&gt;纯css 实现展开收起&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同样 button 的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button&quot;&gt;form&lt;/a&gt;关联到表单 永远心系 form 的 id，不管在页面的哪一个角落。&lt;/p&gt;
&lt;h3 id=&quot;提交数据用form&quot;&gt;提交数据用form&lt;/h3&gt;
&lt;p&gt;提交数据or提交表单的时候，常常会有一个一键清空所有值，有些呢还有回车键提交表单，有些呢还有数据的准确性验证等等&lt;/p&gt;

&lt;p&gt;总之呢用了form，就是轻轻松松简简单单&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;button type=&quot;reset&quot;&amp;gt;我是form表单里面的重置&amp;lt;/button&amp;gt;&lt;/code&gt; 他在表单内，一句话清空表单值&lt;/p&gt;

&lt;p&gt;键盘回车提交数据呢，是表单自带，不用你写。&lt;/p&gt;

&lt;p&gt;数据的验证呢？在表单的上面加原生属性就好了，你不需要做啥特殊的处理，你不需要在另起炉灶。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/xxEJzeO&quot;&gt;form 表单&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;addeventlisten-可以传入四个参数&quot;&gt;addeventlisten 可以传入四个参数&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener&quot;&gt;addeventlisten 文档传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/qBqyVYG?editors=1111&quot;&gt;addeventlisten 原本的第三个参数demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事件冒泡，把事件绑定在父元素的身上，利用事件冒泡，他的子元素都可以监听该事件。基于这个前提，来实现一个，a元素下面的任何一个子元素获取到焦点的时候，触发事件&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex&quot;&gt;tabindex&lt;/a&gt;:元素是否可以聚焦，-1表示可以被聚焦，但是不能被tab索引，经常测试大部分的元素都是-1.也就是说大部分元素其实都可以有焦点相关的事件&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/dyOqKQm?editors=1111&quot;&gt;把所有的事件都绑定在父元素身上&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;es6-的可以实现模版渲染&quot;&gt;ES6 的可以实现模版渲染&lt;/h3&gt;
&lt;p&gt;用过框架的朋友都熟悉变量赋值的语法(${name})，可是又有多少朋友可以做到脱离了框架，用原生属性去实现呢？&lt;/p&gt;

&lt;p&gt;看了张老师的这篇博客你也可以，&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2020/10/es6-html-template-literal/&quot;&gt;ES6模板字符串在HTML模板渲染中的应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文章的关键一段代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String.prototype.interpolate = function (params) {
    const names = Object.keys(params);
    const vals = Object.values(params);
    const str  = new Function(...names, `return \`${this}\`;`)(...vals);
    return str;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即便是没有了框架也可以实现，类似那样的模板赋值。万变不离其宗，有了牢固的基础，要明白弄懂哪些框架的原理，问题应该不大了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/wvoExMv&quot;&gt;es6 模版渲染&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在这行代码的基础上继续扩充，简简单单的就是一个小型的vue了。我&lt;a href=&quot;https://github.com/XboxYan&quot;&gt;同事&lt;/a&gt;再次基础上扩充了一些语法&lt;a href=&quot;https://github.com/yued-fe/web-template&quot;&gt;web-template&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何用-css-判断浏览器类型&quot;&gt;如何用 css 判断浏览器类型&lt;/h3&gt;
&lt;p&gt;用 css 判断这个问题不大，比如&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter&quot;&gt;filter&lt;/a&gt;这个属性只有火狐支持，那么支持这个属性的就是火狐浏览器&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports&quot;&gt;@supports&lt;/a&gt; 用这个就好了呀&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@supports not (filter: url(resources.svg#c1)) {
  div {
    float: right;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;没想到可以用浏览器不支持的属性作为浏览器的判断，这个有优点也有缺点，缺点就是如果哪一天浏览器css支持，那就完了，而且要找到这个css属性也不容易&lt;/p&gt;
&lt;h2 id=&quot;关注原生标签和属性&quot;&gt;关注原生标签和属性&lt;/h2&gt;
&lt;p&gt;你就会发现，他原本的世界就丰富多彩。一个一个使用合适，都是宝。以上说的那些都是我在日常的工作中用到的，日常业务也可以变的丰富多彩，有意义。倘若你在工作中，寻找到学习的乐趣，你的工作就不再是简单的工作。当你看到一个ui或者一个交互，你就抛弃以往惯用的实现方式，另辟蹊径。或许成功，或许失败，但是尝试的勇气是最宝贵的东西。&lt;/p&gt;

&lt;p&gt;尝试成功了，就要记录。为啥要选用新的方式？老的有什么问题？在尝试的过程中遇到了哪些问题？新的方式可以给我带来什么？整个事情就形成了一个闭环，凡事有交代 件件有着落 事事有回应。&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="HTML" /><summary type="html">日常扯皮</summary></entry><entry><title type="html">font-family 字体文章介绍</title><link href="http://localhost:4000/2021/02/21/font-family/" rel="alternate" type="text/html" title="font-family 字体文章介绍" /><published>2021-02-21T00:00:00+08:00</published><updated>2021-02-21T00:00:00+08:00</updated><id>http://localhost:4000/2021/02/21/font-family</id><content type="html" xml:base="http://localhost:4000/2021/02/21/font-family/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;在大多数写代码的时候都很少去设置这个字体，只有很少数的情况才会使用一些特色字体。关于设置字体的问题遇到的是少之又少，但是有一次我还是遇到了。某用户使用华为手机的一款花里胡哨的字体，最后导致这个页面字聚到一坨了，页面简直没法看。解决方法是，给页面设置了一款字体，而不是使用系统字体。&lt;/p&gt;

&lt;h2 id=&quot;字母数字并不是每一个字符都会占等宽&quot;&gt;字母，数字并不是每一个字符都会占等宽&lt;/h2&gt;
&lt;p&gt;为了页面体验，看上去占用一样的宽度。特别是倒计时从0到1的时候，页面会有一个抖动。因为0占的宽度比1要宽。才有这样的情况。所以我们要设置等宽字体Consolas monospace – 等宽字体&lt;/p&gt;

&lt;p&gt;如果网页没有设置默认字体的话，移动端访问网页的时候，若用户使用一些花里胡哨的字体很容易导致整个页面字体布局混乱。&lt;/p&gt;

&lt;p&gt;忘记具体问题了，反正就是字体问题。张老师说是因为字体库本身缺少一些字体行高字重等等的一些原因，出现的问题。&lt;/p&gt;

&lt;p&gt;字体用的最频繁，但是对他的了解是最少的。于是在网上找了一些文字了解了解&lt;/p&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chokcoco/iCSS/issues/6&quot;&gt;你该知道的字体 font-family&lt;/a&gt;:设置元素的字体，可以同时指定多个，如果浏览器不支持第一个字体，则会尝试下一个，可以设置字体或字体系列。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chokcoco/iCSS/issues/69&quot;&gt;Web 字体 font-family 再探秘&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bailicangdu/blog/issues/5&quot;&gt;Web 字体 font-family 浅谈&lt;/a&gt;：和上面那片文章差不多，多了一些具体网站使用的字体及简单点评&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://keqingrong.cn/blog/2019-01-01-font-in-css&quot;&gt;字体，以及 font-family&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pudge1996.medium.com/pingfang-sc-%E6%88%96%E8%AE%B8%E4%B8%8D%E5%BA%94%E8%AF%A5%E4%BD%9C%E4%B8%BA%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E7%9A%84%E9%A6%96%E9%80%89%E9%A1%B9-70cc6d2258fa&quot;&gt;PingFang SC 不应该作为移动端网页字体的首选项&lt;/a&gt;: 我觉得这篇文章写的很不错，里面谈到了app和web页面来回切换时应该要保持字体一致&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="CSS" /><summary type="html">背景 在大多数写代码的时候都很少去设置这个字体，只有很少数的情况才会使用一些特色字体。关于设置字体的问题遇到的是少之又少，但是有一次我还是遇到了。某用户使用华为手机的一款花里胡哨的字体，最后导致这个页面字聚到一坨了，页面简直没法看。解决方法是，给页面设置了一款字体，而不是使用系统字体。</summary></entry><entry><title type="html">Html Attr</title><link href="http://localhost:4000/2021/02/20/html-attr/" rel="alternate" type="text/html" title="Html Attr" /><published>2021-02-20T00:00:00+08:00</published><updated>2021-02-20T00:00:00+08:00</updated><id>http://localhost:4000/2021/02/20/html-attr</id><content type="html" xml:base="http://localhost:4000/2021/02/20/html-attr/">&lt;hr /&gt;
&lt;p&gt;layout: post
title: HTML 属性
categories: [HTML]
description: HTML 属性
keywords: HTML 属性
—&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;有一次同事用overflow实现了拖拽功能，利用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;button autofocus&amp;gt;我有自动聚集功能，加载到这里&amp;lt;/button&amp;gt;&lt;/code&gt; 的 autofocus 自动聚集功能可以实现，页面元素滚动到指定位置，利用type=range 实现评星功能等等（这个在我前面的文章中都有说到），他就和我说了一句，实现功能的时候如果你考虑使用原生属性的自带功能可是事半功倍。我领导在code review 的时候帮我删除啰里八嗦的代码的时候就说了一句，如果是提交东西用form表单，form表单帮我们做了回车键提交事件等等。经历几次之后，深刻体会到元素自带原生属性的方便实用。以此来记录写这片文章&lt;/p&gt;

&lt;h2 id=&quot;button-的-autofocus&quot;&gt;button 的 autofocus&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/WNoEEdJ&quot;&gt;autofocus 自动聚集到页面可见的位置&lt;/a&gt;: 原理是浏览器自动聚集到当前元素&lt;/p&gt;

&lt;h2 id=&quot;元素属性-aligncenterleftright&quot;&gt;元素属性 align=”center｜left｜right”&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div align=&quot;center&quot;&amp;gt;文本内容回居中显示，因为元素上面的设置了&amp;lt;/div&amp;gt;&lt;/code&gt; : 在项目中看到了有使用这个属性，但是在文档里面没有找到，经过尝试，谷歌支持这个属性&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2020/01/html-global-attributes/&quot;&gt;HTML全局属性列表大全&lt;/a&gt;&lt;/p&gt;</content><author><name>sunseekers</name></author><summary type="html">layout: post title: HTML 属性 categories: [HTML] description: HTML 属性 keywords: HTML 属性 —</summary></entry><entry><title type="html">css 用户体验优化</title><link href="http://localhost:4000/2021/01/31/css-experience/" rel="alternate" type="text/html" title="css 用户体验优化" /><published>2021-01-31T00:00:00+08:00</published><updated>2021-01-31T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/31/css-experience</id><content type="html" xml:base="http://localhost:4000/2021/01/31/css-experience/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;昨天去牙科医院看牙齿，在终端挂号与签到的时候，点击触摸屏半天没有得到反馈。我都不知道我的点击是否有用，过了好久好久，才转一个圈圈告诉我在加载中，再过了好久才告诉我，操作成功了。文案还特别小，我就特别难受，不知道那些老爷爷老奶奶用着这个是啥感觉。那一刻我终于体会到我公司设计体验部的重要性了，也深刻明白了，领导们强调的那些重视用户体验了。我身为一个用户，当一款好的产品展示在我的眼前的时候，用着顺心，我整个人都会很开心，很喜欢这个产品。&lt;/p&gt;

&lt;h2 id=&quot;日常开发注意哪些点&quot;&gt;日常开发注意哪些点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果是可操作的，鼠标移动上去要有反馈，通常添加:hover&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表单元素，获取到焦点时候要有反馈，通常添加:focus&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击那一瞬间，需要有淡淡的区域反馈，通常添加:active&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;访问过的链接，根据具体的需求，可以加:visited&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;审视到底哪些效果应该跟着字体一起放大，而哪些效果是保持不变的，影响到的用em单位，你的媒体查询中使用em单位取代像素单位。这能让文本缩放在必要时触发布局的变化&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;颜色需要变化的使用继承或者currentColor,像border-color和outline-color，以及text-shadow和box-shadow，如果没有设置颜色，它就会自动地从文本颜色那里得到颜色&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;inherit可以用在任何CSS属性中，而且它总是绑定到父元素的计算值（对伪元素来说，则会取生成该伪元素的宿主元素，这个inherit关键字对于背景色同样非常有用它比currentColor 使用的范围更广&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;代码易维护和代码量少不可兼得&quot;&gt;代码易维护和代码量少不可兼得&lt;/h2&gt;

&lt;p&gt;使用百分比长度来取代固定长度。如果实在做不到这一点，也应该尝试使用与视口相关的单位（vw、vh、vmin和vmax），它们的值解析为视口宽度或高度的百分比&lt;/p&gt;

&lt;p&gt;当你需要在较大分辨率下得到固定宽度时，使用max-width而不是width，因为它可以适应较小的分辨率，而无需使用媒体查询。&lt;/p&gt;

&lt;p&gt;不要忘记为替换元素（比如img、object、video、iframe等）设置一个max-width，值为100%。&lt;/p&gt;

&lt;p&gt;实现弹性可伸缩的布局，并在媒体查询的各个断点区间内指定相应的尺寸&lt;/p&gt;

&lt;p&gt;这些原生特性通常比预处理器提供的版本要强大得多，因为它们是动态的，举个例子，预处理器完全不知道如何完成100% - 50px这样的计算，因为在页面真正被渲染之前，百分比值是无法解析的。但是，原生CSS的calc()在计算这样的表达式时没有任何压力&lt;/p&gt;

&lt;p&gt;var 变量也可以经常使用。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ul{--accent-color:purple}
ol{--accent-color:rebeccapurple}
li{background:var(--accent-color)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在有序列表中，列表项的背景色将是rebeccapurple；但在无序列表中，列表项的背景色将是purple&lt;/p&gt;

&lt;p&gt;如果一个样式需要两层div混合在一起，那么就会出现一个问题，结构和表现混合在一个，如果可以的话，尽量分开实现一个div就能满足样式的需求&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/ZEBgjxa&quot;&gt;例如 demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/bGBXxNW&quot;&gt;伪元素的使用&lt;/a&gt;&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="CSS" /><summary type="html">背景 昨天去牙科医院看牙齿，在终端挂号与签到的时候，点击触摸屏半天没有得到反馈。我都不知道我的点击是否有用，过了好久好久，才转一个圈圈告诉我在加载中，再过了好久才告诉我，操作成功了。文案还特别小，我就特别难受，不知道那些老爷爷老奶奶用着这个是啥感觉。那一刻我终于体会到我公司设计体验部的重要性了，也深刻明白了，领导们强调的那些重视用户体验了。我身为一个用户，当一款好的产品展示在我的眼前的时候，用着顺心，我整个人都会很开心，很喜欢这个产品。</summary></entry><entry><title type="html">overflow：auto 实现拖拽效果</title><link href="http://localhost:4000/2021/01/26/overflow/" rel="alternate" type="text/html" title="overflow：auto 实现拖拽效果" /><published>2021-01-26T00:00:00+08:00</published><updated>2021-01-26T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/26/overflow</id><content type="html" xml:base="http://localhost:4000/2021/01/26/overflow/">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;overflow：auto 可以实现拖拽，你信或者不信，我已经在代码里面都实现了这个，不信的话，你读完这篇文章，你也可以在你的代码里面实现这个。一句话概括就是CSS实现了拖拽。&lt;/p&gt;

&lt;h2 id=&quot;兼容性怎么样&quot;&gt;兼容性怎么样&lt;/h2&gt;

&lt;p&gt;你问我兼容性怎么样，我就感觉你仿佛在问我overflow：auto的兼容性怎么样。&lt;/p&gt;

&lt;h2 id=&quot;实现效果&quot;&gt;实现效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到图中那个音乐播放器被在到处动嘛？他就是我用overflow：auto实现的拽动，神奇吧。在 css 的世界只有你想不到，没有你做不到的。从&lt;a href=&quot;https://mp.weixin.qq.com/s/aD5BzGFnvMOY4cp_MvZ53A&quot;&gt;震惊，type=”range” 居然可以实现评星功能&lt;/a&gt;到 现在的 overflow：auto 实现拖拽效果，在我入职阅文之后，一次又一次刷新了我对css的认知，打开我眼界。&lt;/p&gt;

&lt;p&gt;音乐播放器播放进度参考&lt;a href=&quot;https://www.zhangxinxu.com/study/201903/css-idea/animation-pie.php?aside=0&quot;&gt;饼图图形与动画&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/PoGMymW&quot;&gt;overflow:实现拖拽 效果 =&amp;gt; 手机版效果&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;这是一个十分钟出现的id&quot;&gt;这是一个十分钟出现的ID&lt;/h2&gt;

&lt;p&gt;或许你觉得我这个标题夸张了，但是我确实是十分钟就看到了这个实现的demo。&lt;/p&gt;

&lt;p&gt;背景是这样：在公司我主要负责高度还原设计稿简称原型开发，原型实现完了交给技术部的同事实现后续的数据逻辑开发。&lt;/p&gt;

&lt;p&gt;在一次音乐播放器的原型开发中，有一个音乐播放器拖拽的功能，最开始我是用js的API实现&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onmousemove&quot;&gt;onmousemove 手指移动的时候相当于拖动&lt;/a&gt;，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart&quot;&gt;ondragstart 开始拖动的时候&lt;/a&gt;。这种方式是可以实现，但是很麻烦，需要对元素拖动的位置进行上下左右的边界判断，越界的时候要进行处理，而且不够优雅。技术部同事拿到我开发的原型，发现了一些莫名其妙的问题，见我代码页不够优雅，于是给我指了一个方向，说找我的老搭档。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一边和老搭档讨论着，一边在解决问题，问题解决了一个，又来一个。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当时我在想是不是我的实现原理或者思路出现问题，代码越写越复杂了。脑子一片混乱的时候，同事给我指了条明道，说用 overflow：auto。我一脸懵逼，他是不是发错消息了？我将错就错的问加哪？我想他肯定会和我说，不好意思发错人了。可是三秒之后，我发现是我想错了，不是他发错了，给了我一链接，他真的实现了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前前后后估计也就是十分钟吧&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;
&lt;p&gt;拖拽，换一个思路就是滚动。横向拖着走就是横着滚，垂直拖着走就是垂直方向滚。&lt;/p&gt;

&lt;p&gt;回到我前面那句话拖拽，换一个思路就是滚动。心里默念三遍，三遍不行就十遍。念顺溜了，并且记住了，接下来的事情就是顺其自然了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/overflow/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这么清晰的画图解释，懂了吧&lt;/p&gt;

&lt;p&gt;这就是代码实现&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/PoGMymW&quot;&gt;overflow:实现拖拽 效果 =&amp;gt; 手机版效果&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;幸运&quot;&gt;幸运&lt;/h2&gt;

&lt;p&gt;每次开发完的原型，心里都忐忑不安的，不管是交出去还是代码 code review ，都达不到完美的效果，大大小小的问题总是避免不了，少不了的自我怀疑，我是不是不行呀。&lt;/p&gt;

&lt;p&gt;但我也会自我安慰，加油，人生就是一个不断去遇见问题然后解决他，生活因此而变得丰富多彩，我就是一个有故事的人。&lt;/p&gt;

&lt;p&gt;我很幸运的，我的幸运在，每一次业务代码都是成长，每一次的问题都是一次成长，每一次的每一次我都有收获。因为有同事参与帮忙，增添了我成长的乐趣，它变成了一件快乐的事，很感谢他们。&lt;/p&gt;

&lt;p&gt;同行和我说：我真的很幸运，你毕业两年多，就能去&lt;a href=&quot;https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;amp;__biz=MzU4MzUzODc3Nw==&amp;amp;scene=124#wechat_redirect&quot;&gt;张鑫旭老师他们的团队&lt;/a&gt;，有&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/&quot;&gt;张老师&lt;/a&gt;的指导，有前途，人家应届生都未必有这样的待遇，踩狗屎，这是多么难的的机遇呀！加油&lt;/p&gt;

&lt;p&gt;写代码的时候我秉承一个习惯：代码应该尽可能简单，因为下一个维护你的代码的人不会像你那么聪明（ps：因为我不聪明，已所不欲勿施于人&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="功能实现" /><summary type="html">前言 overflow：auto 可以实现拖拽，你信或者不信，我已经在代码里面都实现了这个，不信的话，你读完这篇文章，你也可以在你的代码里面实现这个。一句话概括就是CSS实现了拖拽。</summary></entry><entry><title type="html">css 实现环形百分比进度</title><link href="http://localhost:4000/2021/01/23/css-percent/" rel="alternate" type="text/html" title="css 实现环形百分比进度" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/23/css-percent</id><content type="html" xml:base="http://localhost:4000/2021/01/23/css-percent/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;接到一个需求，写一个音乐播放器的UI页面，里面有一个功能，播放环形进度。播放暂停的时候进度也暂停了。这个需求刚开始接触时候有点懵逼，就去张老师博客上面找找思路，他博客真的是一个好东西，啥都有，找一找就能找到解决问题的文章，看一看，需求就写出来了，知识点也学到了。文章主要内容参考&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2019/06/cssconf-css-idea/&quot;&gt;第五届CSS大会主题分享之CSS创意与视觉表现&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/percent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次写出来是参考&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2014/04/css3-pie-loading-waiting-animation/&quot;&gt;CSS3实现鸡蛋饼饼图loading等待转转转&lt;/a&gt; 大概是14年的文章。根据这个文章效果是实现，但是很不友好，这个转圈的时间是固定的，很难中途给她暂停住。音频暂停住了，播放进度还在继续。所以舍弃这个&lt;/p&gt;

&lt;p&gt;后来张老师指导了一下，换了一种很优雅的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/study/201903/css-idea/animation-pie.php?aside=0&quot;&gt;饼图图形与动画&lt;/a&gt; 仔细看了这个实现方式很nice&lt;/p&gt;

&lt;h3 id=&quot;饼图图形与动画实现原理&quot;&gt;饼图图形与动画实现原理&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;通过自定义属性实现，百分比控制显示区域（伪元素可以读取自定义属性数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正方形视区分左右两个半区，溢出隐藏（画一个圆&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进度前50%，主要是右边的旋转和透明，左边的旋转没有作用，左边的旋转只是为了后50%做准备&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进度后50%，主要是左边的旋转和透明，左边的旋转没有作用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;去掉demo 里面的 pie-left::before 就可以验证这个了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;核心代码，看张老师的demo吧，反正这个我是实现不出来，看了demo的代码，也是看了很久，才看明白啥意思，这个实现真的很奇妙&lt;/p&gt;

&lt;h2 id=&quot;继续读张老师的文章后来发现了更多可学习到的东西&quot;&gt;继续读张老师的文章，后来发现了更多可学习到的东西&lt;/h2&gt;

&lt;h3 id=&quot;动画打点&quot;&gt;动画：打点&lt;/h3&gt;
&lt;p&gt;这个就是加载中的那种一个点，两个点，三个点的效果。&lt;/p&gt;

&lt;p&gt;原理就是一个元素展示三行，第一行一个点，第二行两个点，第三行三个点。然后借助animation移动他们的上下移动点。主要借助伪元素的 content: ‘…\A..\A.’;(\A 是一个换行符)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2016/11/css-content-pre-animation-character-loading/&quot;&gt;CSS content换行实现字符点点点loading效果&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/study/201611/animation-content-dot-dot-dot-wait.html&quot;&gt;张老师的demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/jOMovWm&quot;&gt;我自己的demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;css实现平行四边形布局效果&quot;&gt;CSS实现平行四边形布局效果&lt;/h3&gt;

&lt;p&gt;这也是一个很有意思的东西，虽然可以用transform 实现但是，内容会跟着变化，需要在内容再加一个反转。这个就显得不是那么优雅了&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2019/04/css-parallelogram-layout/&quot;&gt;CSS实现平行四边形布局效果&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个实现就很完美，很有意思了；让我认识了一个新的，我没用接触过用过的css 属性，没想到，他居然这么好用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/shape-outside&quot;&gt;shape-outside&lt;/a&gt;:实现相邻元素围绕他转，他让相邻元素围绕他显示啥，就显示啥。什么圆呀，椭圆，都可以。文档里面有很不错的一个例子，我搬抄了一下&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/MWjdqoV&quot;&gt;shape-outside 的使用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这是一个很不错，很有意思的&lt;/p&gt;

&lt;h3 id=&quot;css创意与视觉表现&quot;&gt;CSS创意与视觉表现&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/study/201903/css-idea/shape-hollow.php?aside=0&amp;amp;kind=3&quot;&gt;外圆角选项卡&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;相见恨晚，因为在有一次需要开发的时候，有这个，那时候是我做不出来，用很low的方式解决了，还特别不好使，没有很好的还原设计。但是这种方式可以&lt;/p&gt;

&lt;p&gt;原理就是，两边加伪元素，然后伪元素定位到旁边，利用层级关系，覆盖旁边的&lt;/p&gt;

&lt;h3 id=&quot;行为分栏宽度拉伸&quot;&gt;行为：分栏宽度拉伸&lt;/h3&gt;

&lt;p&gt;实现原理是：CSS中有一个&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/resize&quot;&gt;resize&lt;/a&gt;属性，如果一个元素的overflow属性值不是visible，则通过设置resize属性可以拉伸这个元素尺寸。（把具有拉伸功能的元素覆盖上去，变成透明的就不可见了&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar&quot;&gt;::-webkit-scrollbar&lt;/a&gt; : 可以改变拉伸样式&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/study/201903/css-idea/behavior-stretch.php?aside=0&quot;&gt;纯CSS实现分栏宽度拉伸调整&lt;/a&gt;&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="CSS" /><summary type="html">背景 接到一个需求，写一个音乐播放器的UI页面，里面有一个功能，播放环形进度。播放暂停的时候进度也暂停了。这个需求刚开始接触时候有点懵逼，就去张老师博客上面找找思路，他博客真的是一个好东西，啥都有，找一找就能找到解决问题的文章，看一看，需求就写出来了，知识点也学到了。文章主要内容参考第五届CSS大会主题分享之CSS创意与视觉表现</summary></entry><entry><title type="html">mask 常用的场景</title><link href="http://localhost:4000/2021/01/16/mask/" rel="alternate" type="text/html" title="mask 常用的场景" /><published>2021-01-16T00:00:00+08:00</published><updated>2021-01-16T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/16/mask</id><content type="html" xml:base="http://localhost:4000/2021/01/16/mask/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;入职阅文以后，第一次做项目的时候用到了 mask，后来用到的频率越来越高，就发现这个真的是一个好东西，记录一下&lt;/p&gt;

&lt;h2 id=&quot;背景颜色变化影响图片&quot;&gt;背景颜色变化影响图片&lt;/h2&gt;
&lt;p&gt;之前写的一篇文章和一个demo &lt;a href=&quot;https://codepen.io/qingchuang/pen/jOMmQab&quot;&gt;range 实现评分组件&lt;/a&gt;，里面就是用 mask 实现的，把图片盖在背景之上（效果是只显示背景只显示图片区域内，而图片会变成透明的）就实现了背景颜色变化，图片的颜色也跟着变化&lt;/p&gt;

&lt;p&gt;例如 &lt;a href=&quot;https://codepen.io/qingchuang/pen/NWReyJd&quot;&gt;mask 实现图片随背景变化而变化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/WNGLzRX&quot;&gt;mask 实现文字渐变&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6931168723021758478&quot;&gt;使用 mask 实现视频弹幕人物遮罩过滤&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;边缘镂空半圆的css效果&quot;&gt;边缘镂空半圆的CSS效果&lt;/h2&gt;
&lt;p&gt;张老师的小测里面出了一个场景题目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/mask/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实现边缘镂空的效果，我第一时间想到了，或许mask可以，但是实现看了半天，最终实现不了放弃了。通过后台看&lt;a href=&quot;https://github.com/XboxYan&quot;&gt;XboxYan 同事&lt;/a&gt;的代码，发现一个很棒很棒的实现。我研究讨论了一段时间才弄懂了。&lt;/p&gt;

&lt;p&gt;我 copy 同事的代码出来&lt;a href=&quot;https://codepen.io/qingchuang/pen/YzpgdmB&quot;&gt;mask 边缘镂空半圆的CSS效果&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我看的不是很明白就在问他&lt;/p&gt;

&lt;p&gt;我：为啥mask-position:负数，就会被劈成两个？两边显示&lt;/p&gt;

&lt;p&gt;他：你改成0看看&lt;/p&gt;

&lt;p&gt;我：零就是一个圆，为负的时候就开始劈开了，负的越多，就开始劈的厉害&lt;/p&gt;

&lt;p&gt;他：这个和背景一样，是平铺的&lt;/p&gt;

&lt;p&gt;我：还是不懂，为啥会劈开两端，中间没有平铺&lt;/p&gt;

&lt;p&gt;他：因为背景有这么大，然后那个洞本来就在最左边&lt;/p&gt;

&lt;p&gt;我还是不懂，于是我就去试了试，他说的背景图&lt;/p&gt;

&lt;p&gt;试了试成功了，开心，我以为我懂了，就去和他说我懂了&lt;a href=&quot;https://codepen.io/qingchuang/pen/OJbqdyP&quot;&gt;背景镂空&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我：但是我不清楚，位置变负以后的表现，从来没有用过。觉得很奇怪，查看文档也没有说，会劈在两边显示呀&lt;/p&gt;

&lt;p&gt;继续尝试，把background-image换成图片之后，失败了，我懵逼了。到底咋回事，他说的平铺是啥呢？&lt;/p&gt;

&lt;p&gt;我：我把我的不懂继续问他，换了一种问法，为啥图片不行，radial-gradient(circle at 10px center, red 10px, transparent 0)就可以了&lt;/p&gt;

&lt;p&gt;他：这个绘制出来的就是一整张图，只有左边有一个红色的圆&lt;/p&gt;

&lt;p&gt;我：突然明白了，所以利用的是她的平铺特性，其实是有一张多的图片，并不只是一张图片。真的太厉害了&lt;/p&gt;

&lt;p&gt;他：试一试圆分成四份，放在四个角落？&lt;/p&gt;

&lt;p&gt;有一次get到很强的写法，我总是那么菜，还笨&lt;/p&gt;

&lt;p&gt;细细品读了两篇文章，才真正意义上的理解了 mask 用我粗糙的理解就是遮罩，就像用ps把两张图片叠在一起一样，底图就是一张正常的图，上面的图片，是部分透明，部分不透明。透明部分就穿过可以看到底图，从而就实现了两张图片遮罩的效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/mask/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我：想了很久尝试了很多没有想出来，他说的那个，用一个很low的&lt;/p&gt;

&lt;p&gt;他：看了我的low方案之后，给我一个很不错的方案&lt;/p&gt;

&lt;p&gt;我：大神就是大神&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/QWGPgQB&quot;&gt;圆分成四份，放在四个角落&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我：不懂为啥只在后面只加了一句话&lt;/p&gt;

&lt;p&gt;他：省略就给一个默认值50%，图片刚好是容器大小，所以本身就是居中的；&lt;/p&gt;

&lt;p&gt;我：无论负多少，都没有变化，继续问&lt;/p&gt;

&lt;p&gt;他：(容器尺寸 - 图片尺寸) * xx%，图片刚好是容器大小，所以永远都是0，没有效果。两个方向上的，一般省略都不是相同的&lt;/p&gt;

&lt;p&gt;真好，能和&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/&quot;&gt;张老师&lt;/a&gt;和&lt;a href=&quot;https://github.com/XboxYan&quot;&gt;XboxYan&lt;/a&gt;一起办公很爽呀，发现很多很有意思的css，茅塞顿开，学习到了很多，感谢&lt;/p&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2017/11/css-css3-mask-masks/#mask-position&quot;&gt;客栈说书：CSS遮罩CSS3 mask/masks详细介绍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3cplus.com/css3/css-masking.html&quot;&gt;CSS遮罩——如何在CSS中使用遮罩&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.canvasapi.cn/CanvasRenderingContext2D/globalCompositeOperation#&amp;amp;details&quot;&gt;mask-composite 借鉴了Canvas中的globalCompositeOperation属性值，各个属性值详细作用可以&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2017/11/css3-radial-gradient-syntax-example/&quot;&gt;10个demo示例学会CSS3 radial-gradient径向渐变&lt;/a&gt;: 文章里面提到了radial-gradient径向渐变 这个属性我不太熟，看了一遍懂了，以后不懂可以多看看。（at 后面是起始位置，关键字前面是半径，关键字是形状，之后就是颜色的变化了，radial-gradient(20px 15px ellipse at top, red 10px, transparent 11px)，ellipse =&amp;gt; 椭圆， 20px =&amp;gt;横轴半径，10px =&amp;gt; 表示纵轴半径 表示绘制一个长度100px高度200px的椭圆. top 从上面开始，red 10px, transparent 11px颜色变化；对于径向渐变，在不指定渐变类型以及位置的情况下，其渐变距离和位置是由容器的尺寸决定的。指定位置或类型会发现既不是按照宽度来的，也不是按照高度来的，是按照最远边角距离作为渐变结束线的（对角线的位置：&lt;/p&gt;

&lt;p&gt;mask 的很多属性都和background一样的，所以两边有的属性就当全部是公用的就好了&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="CSS" /><summary type="html">背景 入职阅文以后，第一次做项目的时候用到了 mask，后来用到的频率越来越高，就发现这个真的是一个好东西，记录一下</summary></entry><entry><title type="html">form 表单验证元素</title><link href="http://localhost:4000/2021/01/10/form-validity/" rel="alternate" type="text/html" title="form 表单验证元素" /><published>2021-01-10T00:00:00+08:00</published><updated>2021-01-10T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/10/form-validity</id><content type="html" xml:base="http://localhost:4000/2021/01/10/form-validity/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;接着前面的的表单元素继续说，用户提交一个表单或者一段数据的时候，通常我们都会有表单验证，验证内容是否合法，验证内容的有效性，验证内容是否填写了等等，这样的需求在平常的项目里面应该是一个很常见的操作。如果你对form表单有了解，我相信你很多事原生标签都帮你做了&lt;/p&gt;

&lt;h2 id=&quot;表单样式修改&quot;&gt;表单样式修改&lt;/h2&gt;
&lt;p&gt;我们可以通过 css 的伪类来控制表单验证的情况，&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid&quot;&gt;:valid 内容验证正确&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/:invalid&quot;&gt;:invalid 内容未通过验证&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/:optional&quot;&gt;:optional 任意没有required属性的&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:required&quot;&gt;:required 必选的时候样式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-within&quot;&gt;:focus-within 元素获得焦点，他的父元素发生变化&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;form表单元素内置验证方法和属性&quot;&gt;form表单元素内置验证方法和属性&lt;/h2&gt;

&lt;p&gt;checkValidity()方法可以用来验证当前表单控件元素，或者整个表单是否验证通过，返回值是布尔值，true或者false。&lt;/p&gt;

&lt;p&gt;reportValidity()方法可以触发浏览器的内置的验证提示交互，返回布尔值，true或者false&lt;/p&gt;

&lt;p&gt;setCustomValidity()方法顾名思义就是设置自定义的验证，我们可以使用这个方法自定义提示文字。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2019/08/js-checkvalidity-setcustomvalidity/&quot;&gt;checkValidity等form原生JS验证方法和属性详细介绍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mifengjc.com/api/HTMLFormElement.html&quot;&gt;HTMLFormElement - 表示 DOM 中的 &amp;lt;form&amp;gt; 元素&lt;/a&gt;&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="HTML" /><summary type="html">背景 接着前面的的表单元素继续说，用户提交一个表单或者一段数据的时候，通常我们都会有表单验证，验证内容是否合法，验证内容的有效性，验证内容是否填写了等等，这样的需求在平常的项目里面应该是一个很常见的操作。如果你对form表单有了解，我相信你很多事原生标签都帮你做了</summary></entry><entry><title type="html">CSS处理js事件</title><link href="http://localhost:4000/2021/01/10/css-event/" rel="alternate" type="text/html" title="CSS处理js事件" /><published>2021-01-10T00:00:00+08:00</published><updated>2021-01-10T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/10/css-event</id><content type="html" xml:base="http://localhost:4000/2021/01/10/css-event/">&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;周末没有约朋友出去玩，在家闲的无聊，逛起了掘金，看到了同事的文章&lt;a href=&quot;https://juejin.cn/post/6844903856908812296&quot;&gt;借助CSS来管理js事件&lt;/a&gt;，觉得很有意思，就自己动手实现一下，文章大部分的内容都是来自他的文章。同事的css是真的很强，他用很多css解决了js的问题。像他多多学习&lt;/p&gt;

&lt;h2 id=&quot;css-能解决js问题&quot;&gt;css 能解决js问题&lt;/h2&gt;
&lt;h3 id=&quot;表单元素获取到焦点时样式被修改&quot;&gt;表单元素获取到焦点时样式被修改&lt;/h3&gt;
&lt;p&gt;给表单元素的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx:focus{}&lt;/code&gt;就可以实现，元素获取到焦点的时候，样式修改&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/LYRBBZL&quot;&gt;借用 label 修改数据&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;表单元素禁止点击&quot;&gt;表单元素禁止点击&lt;/h3&gt;
&lt;p&gt;对于禁止表单元素点击，我们经常会用到 disabled，元素确实是不可点击并且没有了点击事件。但是对于非表单元素我们就需要写js逻辑去添加样式，逻辑判断。显然代码量不少，那么我们如何用css解决呢？&lt;/p&gt;

&lt;p&gt;和表单元素一样，不可点击的元素加上自定义属性disabled，然后给这个元素加上一个属性选择器就好了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[disabled]{pointer-events:none;}&lt;/code&gt;。还可以美化他的样式，写一个我们ui需要的样式&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/yLaqdRO&quot;&gt;css pointer-events 禁用事件&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;长按事件&quot;&gt;长按事件&lt;/h3&gt;
&lt;p&gt;若不是看到同事的掘金，我怎么也想不到，原来结合css，js还可以做这个操作。厉害了，每次看到同事们用css实现了啥骚操作，减少了很多很多js代码的时候，就想夸他们，当他们解决了我不能解决的问题的时候我更想夸&lt;/p&gt;

&lt;p&gt;长按事件实现的原理是，css3中新增了过渡和动画属性(一个不会影响页面样式的属性过渡），js去监听过渡属性开始/进行中/完成的事件，这个事件就是我们所需要的。点击的时候添加一个属性选择器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:active&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;button:hover:active{
  opacity:.99;/**随便选取一个不影响页面的可以过渡的样式**/
  color:red; /** 这里是为了能够看到样式的变化，在变化的过程中完成事件**/
  transition:color 1s;
}

  const button = document.querySelector('button')
  button.addEventListener('transitionend',function(){
    //业务代码
    alert('长按的弹窗')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单次点击事件&quot;&gt;单次点击事件&lt;/h3&gt;
&lt;p&gt;实现原理是：animationend是动画结束后触发，显然我们可以在这里做文章&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/qingchuang/pen/yLaqdma&quot;&gt;css 单次事件&lt;/a&gt;&lt;/p&gt;</content><author><name>sunseekers</name></author><category term="CSS" /><summary type="html">背景 周末没有约朋友出去玩，在家闲的无聊，逛起了掘金，看到了同事的文章借助CSS来管理js事件，觉得很有意思，就自己动手实现一下，文章大部分的内容都是来自他的文章。同事的css是真的很强，他用很多css解决了js的问题。像他多多学习</summary></entry></feed>